lib_loc <- "[library location]"
to_install <- unname(installed.packages(lib.loc = lib_loc)[, "Package"])
to_install
libPaths()
requiredPackages = c('XML','RCurl','ggplot2','sqldf','DBI','RSQLite' )
for(p in requiredPackages){
if(!require(p,character.only = TRUE)) install.packages(p)
library(p,character.only = TRUE)
}
library(XML)
library(RCurl)
library(ggplot2)
library(sqldf)
library(DBI)
library(dplyr)
library(RSQLite)
xml.url <- "https://amanbatra.in/static/plants.xml"
XMLData <- getURL(xml.url)
xmlDocument = xmlParse(XMLData)
xmlDocument
# Checking if the XML file exists in the directory or not, if not, it will be downloaded automatically via host
if(file.exists("plants.xml")==FALSE) {
download.file("https://amanbatra.in/static/plants.xml","./plants.xml")
}
# load data into dataframe from XMLData file
xmldf = xmlToDataFrame("plants.xml")
xmldf
# Extracting numeric prices from PRICE column and replacing the dollar sign with null.
RETAIL=as.numeric(gsub("[\\$,]", "", xmldf$PRICE))
# Adding a data column for prices without the Dollar sign in them, using the cbind method to bind a column, using if else to prevent double the operation, if column already present
# checking output for the upda  ted data frame
if("RETAIL" %in% colnames(xmldf))
{
xmldf;
} else {
xmldf=cbind(xmldf,RETAIL);
xmldf;
}
# Passing all unwanted column names into a new variable
unwantedcol <- "PRICE"
# Performing self update, checking if column exists and dataframe and deleting it, the second way is commented out
xmldf <- xmldf[, ! names(xmldf) %in% unwantedcol, drop = F]
# xmldf<- within(xmldf,rm(PRICE))
# output the final dataframe
xmldf
# 4.25 % increase is equal to 104.25 % of the original value which can be written as (104.25/100)*Original Value or 1.0425*Original Value in short, the second way is commented out.
xmldf$RETAIL=xmldf$RETAIL*1.0425
# xmldf$RETAIL = xmldf$RETAIL  + (4.25/100)*xmldf$RETAIL
# output only prices columns
xmldf$RETAIL
# output the final dataframe
xmldf
# Making a histgram without any external libraries
pricelist <- xmldf$RETAIL
pricehist<- hist(pricelist,
main="Histogram for plant prices in the catalog",
xlab="Prices in dollars ($) ",
xlim=c(0,12),
ylab="Frequency Of Prices",
ylim=c(0,12),
col=c("darkgreen","blue","grey","black"),
border="yellow",
freq=TRUE,
breaks=10
)
text(pricehist$mids,pricehist$counts,labels=pricehist$counts, adj=c(0.5, -0.5))
# Making a histogram with ggplot2 (THIS SECTION IS OPTIONAL)
require(ggplot2)
set.seed(1L)
binwidth <- 1
start_bin <- binwidth * floor(min(pricelist) / binwidth)
# compute breaks and bin the data
breaks <- seq(start_bin, max(pricelist) + binwidth, by = binwidth)
pricelist2 <- cut(sort(pricelist), breaks = breaks, by = binwidth)
ggplot() + geom_col(aes(x = head(breaks, -1L),
y = as.integer(table(pricelist2)),
fill = levels(pricelist2))) +
ylab("Plant count") + xlab("Price List")
# Making a histgram without any external libraries
pricelist <- xmldf$RETAIL
pricehist<- hist(pricelist,
main="Histogram for plant prices in the catalog",
xlab="Prices in dollars ($) ",
xlim=c(0,12),
ylab="Frequency Of Prices",
ylim=c(0,12),
col=c("darkgreen","blue","grey","black"),
border="yellow",
freq=TRUE,
breaks=10
)
text(pricehist$mids,pricehist$counts,labels=pricehist$counts, adj=c(0.5, -0.5))
# Making a histogram with ggplot2 (THIS SECTION IS OPTIONAL)
require(ggplot2)
set.seed(1L)
binwidth <- 1
start_bin <- binwidth * floor(min(pricelist) / binwidth)
# compute breaks and bin the data
breaks <- seq(start_bin, max(pricelist) + binwidth, by = binwidth)
pricelist2 <- cut(sort(pricelist), breaks = breaks, by = binwidth)
ggplot() + geom_col(aes(x = head(breaks, -1L),
y = as.integer(table(pricelist2)),
fill = levels(pricelist2))) +
ylab("Plant count") + xlab("Price List")
queryxmldf <- sqldf("select COMMON from xmldf where RETAIL<8 and LIGHT='Sunny'")
queryxmldf
# SELECT count of plants where light = SHADE
plantcountxmldf <- sqldf("select count(*) as 'Total plants that grow in full shade' from xmldf where LIGHT='Shade'")
plantcountxmldf
# Initializing an empty database and then using dbWriteTable to write the table to empty database
# We will check using both dbReadTable and SQLite inspect, to see if the newly created table exists or not
sqldbfile <- "catalog.db"
if (file.exists(sqldbfile)==TRUE) {
file.remove(sqldbfile)}
con <- dbConnect(RSQLite::SQLite(), "catalog.db")
dbWriteTable(con,
"catalog",
xmldf,
overwrite = TRUE,
header = TRUE,
temporary = FALSE)
#first check via dbReadTable
dbReadTable(con, "catalog")
dbDisconnect(con)
# We are using two way connection to our SQLite database to ensure it does not go missing during execution or practicum submission
# I check local storage first for the presence of database file "catalog.db" if for some reason, db isn't present then
# I will load the file using my remote, the db at both place is exact same.
if(file.exists("catalog.db")){
con <- dbConnect(SQLite(), dbname="catalog.db" )
dbReadTable(con,"CATALOG")
} else {
print("Database file catalog.db missing from root storage, downloading from remote")
dbfile <- tempfile(fileext=".db")
download.file("https://amanbatra.in/static/catalog.db", dbfile)
con <- dbConnect(SQLite(), dbname=dbfile )
dbReadTable(con,"catalog")
}
# The connection to SQLite database was initiated in the previous step, so we do not need to connect again
# fetching the query result in local variable to store and display concurrently
plantqueryres <- dbGetQuery(con, "SELECT COUNT(*) AS 'Number of plants grouped by light', LIGHT FROM catalog GROUP BY LIGHT")
plantqueryres
dbDisconnect(con)
xml.url <- "https://amanbatra.in/static/plants.xml"
xData <- getURL(xml.url)
xDoc = xmlParse(xData)
queryres <- xpathSApply(xDoc,"/CATALOG/PLANT[ LIGHT = 'Sun' or LIGHT = 'Shade']")
queryres
dframe<-xmlToDataFrame(queryres)
dframe
trimmedmean <- mean(as.numeric(gsub("[\\$,]", "", dframe$PRICE)), trim=0.1)
paste0("10% Trimmed mean of the prices = ", trimmedmean)
install.packages('mongolite')
install.packages('lubridata')
install.packages('lubridate')
install.packages('gridextra')
yes
install.packages('gridExtra')
install.packages('data.table')
xml.url <- "https://amanbatra.in/static/plants.xml"
xData <- getURL(xml.url)
source('~/.active-rstudio-document', echo=TRUE)
requiredPackages = c('XML','RCurl','ggplot2','sqldf','DBI','RSQLite','knitrBootstrap' )
for(p in requiredPackages){
if(!require(p,character.only = TRUE)) install.packages(p)
library(p,character.only = TRUE)
}
library(XML)
library(RCurl)
library(ggplot2)
library(sqldf)
library(DBI)
library(dplyr)
library(RSQLite)
library(knitrBootstrap)
xml.url <- "https://amanbatra.in/static/plants.xml"
XMLData <- getURL(xml.url)
xmlDocument = xmlParse(XMLData)
xmlDocument
# Checking if the XML file exists in the directory or not, if not, it will be downloaded automatically via host
if(file.exists("plants.xml")==FALSE) {
download.file("https://amanbatra.in/static/plants.xml","./plants.xml")
}
# load data into dataframe from XMLData file
xmldf = xmlToDataFrame("plants.xml")
xmldf
# Extracting numeric prices from PRICE column and replacing the dollar sign with null.
RETAIL=as.numeric(gsub("[\\$,]", "", xmldf$PRICE))
# Adding a data column for prices without the Dollar sign in them, using the cbind method to bind a column, using if else to prevent double the operation, if column already present
# checking output for the upda  ted data frame
if("RETAIL" %in% colnames(xmldf))
{
xmldf;
} else {
xmldf=cbind(xmldf,RETAIL);
xmldf;
}
# Passing all unwanted column names into a new variable
unwantedcol <- "PRICE"
# Performing self update, checking if column exists and dataframe and deleting it, the second way is commented out
xmldf <- xmldf[, ! names(xmldf) %in% unwantedcol, drop = F]
# xmldf<- within(xmldf,rm(PRICE))
# output the final dataframe
xmldf
# 4.25 % increase is equal to 104.25 % of the original value which can be written as (104.25/100)*Original Value or 1.0425*Original Value in short, the second way is commented out.
xmldf$RETAIL=xmldf$RETAIL*1.0425
# xmldf$RETAIL = xmldf$RETAIL  + (4.25/100)*xmldf$RETAIL
# output only prices columns
xmldf$RETAIL
# output the final dataframe
xmldf
# Making a histgram without any external libraries
pricelist <- xmldf$RETAIL
pricehist<- hist(pricelist,
main="Histogram for plant prices in the catalog",
xlab="Prices in dollars ($) ",
xlim=c(0,12),
ylab="Frequency Of Prices",
ylim=c(0,12),
col=c("darkgreen","blue","grey","black"),
border="yellow",
freq=TRUE,
breaks=10
)
text(pricehist$mids,pricehist$counts,labels=pricehist$counts, adj=c(0.5, -0.5))
# Making a histogram with ggplot2 (THIS SECTION IS OPTIONAL)
require(ggplot2)
set.seed(1L)
binwidth <- 1
start_bin <- binwidth * floor(min(pricelist) / binwidth)
# compute breaks and bin the data
breaks <- seq(start_bin, max(pricelist) + binwidth, by = binwidth)
pricelist2 <- cut(sort(pricelist), breaks = breaks, by = binwidth)
ggplot() + geom_col(aes(x = head(breaks, -1L),
y = as.integer(table(pricelist2)),
fill = levels(pricelist2))) +
ylab("Plant count") + xlab("Availability List")
ggplot(as.data.frame(xmldf), aes(factor(RETAIL), Freq, fill = AVAILABILITY)) +
geom_col(position = 'dodge')
# Making a histgram without any external libraries
pricelist <- xmldf$RETAIL
pricehist<- hist(pricelist,
main="Histogram for plant prices in the catalog",
xlab="Prices in dollars ($) ",
xlim=c(0,12),
ylab="Frequency Of Prices",
ylim=c(0,12),
col=c("darkgreen","blue","grey","black"),
border="yellow",
freq=TRUE,
breaks=10
)
text(pricehist$mids,pricehist$counts,labels=pricehist$counts, adj=c(0.5, -0.5))
# Making a histogram with ggplot2 (THIS SECTION IS OPTIONAL)
require(ggplot2)
set.seed(1L)
binwidth <- 1
start_bin <- binwidth * floor(min(pricelist) / binwidth)
# compute breaks and bin the data
breaks <- seq(start_bin, max(pricelist) + binwidth, by = binwidth)
pricelist2 <- cut(sort(pricelist), breaks = breaks, by = binwidth)
ggplot() + geom_col(aes(x = head(breaks, -1L),
y = as.integer(table(pricelist2)),
fill = levels(pricelist2))) +
ylab("Plant count") + xlab("Availability List")
ggplot(as.data.frame(xmldf), aes(factor(RETAIL), AVAILABILITY, fill = RETAIL)) +
geom_col(position = 'dodge')
# Making a histgram without any external libraries
pricelist <- xmldf$RETAIL
pricehist<- hist(pricelist,
main="Histogram for plant prices in the catalog",
xlab="Prices in dollars ($) ",
xlim=c(0,12),
ylab="Frequency Of Prices",
ylim=c(0,12),
col=c("darkgreen","blue","grey","black"),
border="yellow",
freq=TRUE,
breaks=10
)
text(pricehist$mids,pricehist$counts,labels=pricehist$counts, adj=c(0.5, -0.5))
# Making a histogram with ggplot2 (THIS SECTION IS OPTIONAL)
require(ggplot2)
set.seed(1L)
binwidth <- 1
start_bin <- binwidth * floor(min(pricelist) / binwidth)
# compute breaks and bin the data
breaks <- seq(start_bin, max(pricelist) + binwidth, by = binwidth)
pricelist2 <- cut(sort(pricelist), breaks = breaks, by = binwidth)
ggplot() + geom_col(aes(x = head(breaks, -1L),
y = as.integer(table(pricelist2)),
fill = levels(pricelist2))) +
ylab("Plant count") + xlab("Availability List")
ggplot(as.data.frame(xmldf), aes(factor(RETAIL), AVAILABILITY, fill = RETAIL)) +
geom_col(position = 'dodge', binwidth=1)
# Making a histgram without any external libraries
pricelist <- xmldf$RETAIL
pricehist<- hist(pricelist,
main="Histogram for plant prices in the catalog",
xlab="Prices in dollars ($) ",
xlim=c(0,12),
ylab="Frequency Of Prices",
ylim=c(0,12),
col=c("darkgreen","blue","grey","black"),
border="yellow",
freq=TRUE,
breaks=10
)
text(pricehist$mids,pricehist$counts,labels=pricehist$counts, adj=c(0.5, -0.5))
# Making a histogram with ggplot2 (THIS SECTION IS OPTIONAL)
require(ggplot2)
set.seed(1L)
binwidth <- 1
start_bin <- binwidth * floor(min(pricelist) / binwidth)
# compute breaks and bin the data
breaks <- seq(start_bin, max(pricelist) + binwidth, by = binwidth)
pricelist2 <- cut(sort(pricelist), breaks = breaks, by = binwidth)
ggplot() + geom_col(aes(x = head(breaks, -1L),
y = as.integer(table(pricelist2)),
fill = levels(pricelist2))) +
ylab("Plant count") + xlab("Availability List")
ggplot(as.data.frame(xmldf), aes(factor(RETAIL), AVAILABILITY, fill = RETAIL)) +
geom_col(position = 'dodge', width = 1)
# Making a histgram without any external libraries
pricelist <- xmldf$RETAIL
pricehist<- hist(pricelist,
main="Histogram for plant prices in the catalog",
xlab="Prices in dollars ($) ",
xlim=c(0,12),
ylab="Frequency Of Prices",
ylim=c(0,12),
col=c("darkgreen","blue","grey","black"),
border="yellow",
freq=TRUE,
breaks=10
)
text(pricehist$mids,pricehist$counts,labels=pricehist$counts, adj=c(0.5, -0.5))
# Making a histogram with ggplot2 (THIS SECTION IS OPTIONAL)
require(ggplot2)
set.seed(1L)
binwidth <- 1
start_bin <- binwidth * floor(min(pricelist) / binwidth)
# compute breaks and bin the data
breaks <- seq(start_bin, max(pricelist) + binwidth, by = binwidth)
pricelist2 <- cut(sort(pricelist), breaks = breaks, by = binwidth)
ggplot() + geom_col(aes(x = head(breaks, -1L),
y = as.integer(table(pricelist2)),
fill = levels(pricelist2))) +
ylab("Plant count") + xlab("Availability List")
ggplot(as.data.frame(xmldf), aes(factor(RETAIL), as.numeric(AVAILABILITY), fill = RETAIL)) +
geom_col(position = 'dodge', width = 1)
# Making a histgram without any external libraries
pricelist <- xmldf$RETAIL
pricehist<- hist(pricelist,
main="Histogram for plant prices in the catalog",
xlab="Prices in dollars ($) ",
xlim=c(0,12),
ylab="Frequency Of Prices",
ylim=c(0,12),
col=c("darkgreen","blue","grey","black"),
border="yellow",
freq=TRUE,
breaks=10
)
text(pricehist$mids,pricehist$counts,labels=pricehist$counts, adj=c(0.5, -0.5))
# Making a histogram with ggplot2 (THIS SECTION IS OPTIONAL)
require(ggplot2)
set.seed(1L)
binwidth <- 1
start_bin <- binwidth * floor(min(pricelist) / binwidth)
# compute breaks and bin the data
breaks <- seq(start_bin, max(pricelist) + binwidth, by = binwidth)
pricelist2 <- cut(sort(pricelist), breaks = breaks, by = binwidth)
ggplot() + geom_col(aes(x = head(breaks, -1L),
y = as.integer(table(pricelist2)),
fill = levels(pricelist2))) +
ylab("Plant count") + xlab("Availability List")
ggplot(as.data.frame(xmldf), aes(factor(RETAIL), as.numeric(AVAILABILITY), fill = RETAIL)) +
geom_col(position = 'dodge', width = 3)
data=xmldf$AVAILABILITY
# Get the density estimate
dens=density(data)
# Plot y-values scaled by number of observations against x values
plot(xmldf$RETAIL,length(data)*dens,type="l",xlab="Value",ylab="Count estimate"
# Generate some data
data=xmldf$AVAILABILITY
# Get the density estimate
dens=density(data)
# Plot y-values scaled by number of observations against x values
plot(xmldf$RETAIL,length(data)*dens,type="l",xlab="Value",ylab="Count estimate")
data=xmldf$AVAILABILITY
# Get the density estimate
dens=density(data)
# Plot y-values scaled by number of observations against x values
plot(xmldf$RETAIL,length(data)*data,type="l",xlab="Value",ylab="Count estimate")
ggplot(as.data.frame(xmldf), aes(factor(RETAIL), as.numeric(AVAILABILITY), fill = RETAIL)) +
geom_col(position = 'dodge')
